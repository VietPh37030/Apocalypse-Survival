export type ResourceKey = 'food' | 'water' | 'meds' | 'radioPart' | 'wrench';

export type Inventory = Record<ResourceKey, number>;

export interface Stats {
  health: number;
  hunger: number;
  thirst: number;
  stress: number;
  morale: number;
}

export interface Sickness {
  id: string;
  name: string;
  description: string;
  duration: number; // in days
  effects: {
    health?: number;
    hunger?: number;
    thirst?: number;
    stress?: number;
    morale?: number;
  };
  longTermEffects: string;
  cure: string;
}

export interface Character {
  id: string;
  name: string;
  description: string;
  stats: Stats;
  isAlive: boolean;
  sickness: Sickness | null;
}

export interface Choice {
  text: string;
  requiredItem?: ResourceKey;
  // The 'outcome' will be a text description generated by the AI
}

export interface GameEvent {
  eventTitle: string;
  eventDescription: string;
  choices: Choice[];
}

export interface StatChange {
    characterId: string;
    stat: keyof Stats;
    change: number; // can be positive or negative
}

export interface InventoryChange {
    item: ResourceKey;
    change: number; // can be positive or negative
}

export interface SicknessChange {
    characterId: string;
    sicknessId: string | 'none'; // ID from SICKNESSES object, or 'none' to cure
    duration?: number; // Optional override for sickness duration
}


export interface Outcome {
    outcomeDescription: string;
    statChanges?: StatChange[];
    inventoryChanges?: InventoryChange[];
    sicknessChanges?: SicknessChange[];
}

export interface LogEntry {
    day: number;
    text: string;
    type: 'event' | 'choice' | 'outcome' | 'narration' | 'status' | 'dialogue' | 'scavenge';
}

export interface Notification {
    id: number;
    text: string;
    type: 'gain' | 'loss';
}

export interface GameState {
  characters: Character[];
  inventory: Inventory;
  day: number;
  log: LogEntry[];
  currentEvent: GameEvent | null;
  gameOver: {
    isGameOver: boolean;
    isWin: boolean;
    message: string;
  };
  isLoading: boolean;
  gameStarted: boolean;
  intro: string;
  currentDialogue: string | null;
  canScavenge: boolean;
}